AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  exam9B

  Sample SAM Template for exam9B

Globals:
  Function:
    Timeout: 3

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                Resource: arn:aws:logs:*:*:*

  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UserApi
      StageName: Dev

  RolApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RolApi
      StageName: Dev

  RentaApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RentaApi
      StageName: Dev

  BookApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: BookApi
      StageName: Dev

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  InsertRolAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: roles/insert_rol/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertRol:
          Type: Api
          Properties:
            RestApiId: !Ref RolApi
            Path: /insert_rol
            Method: post

  InsertUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/insert_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /insert_user
            Method: post

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/update_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /update_user
            Method: put

  GetUserAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/get_users/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /getAll
            Method: get

  GetUserByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/get_userById/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /get/{id}
            Method: get

  PatchStatusUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/status_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        PatchStatus:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /updateStatus/{id}
            Method: patch

  CreateRentaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: renta/create_renta/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        CreateRenta:
          Type: Api
          Properties:
            RestApiId: !Ref RentaApi
            Path: /create_renta
            Method: post

  BajaRentaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: renta/baja_renta/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        BajaRenta:
          Type: Api
          Properties:
            RestApiId: !Ref RentaApi
            Path: /baja_renta/{id}
            Method: patch

  CreateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: book/create_book/
      Handler: create_book.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        CreateBook:
          Type: Api
          Properties:
            RestApiId: !Ref BookApi
            Path: /create_book
            Method: post

  UpdateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: book/update_book/
      Handler: update_book.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UpdateBook:
          Type: Api
          Properties:
            RestApiId: !Ref BookApi
            Path: /update_book/{id_book}
            Method: put

  PatchBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: book/patch_book/
      Handler: patch_book.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        PatchBook:
          Type: Api
          Properties:
            RestApiId: !Ref BookApi
            Path: /update_book_status/{id_book}
            Method: patch

  GetBookAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: book/get_books/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetBooks:
          Type: Api
          Properties:
            RestApiId: !Ref BookApi
            Path: /getAll
            Method: get

  GetBookByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: book/get_bookById/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetBookById:
          Type: Api
          Properties:
            RestApiId: !Ref BookApi
            Path: /get/{id}
            Method: get

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Dev stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn

  InsertRolAllFunction:
    Description: "Insert Rol Lambda Function ARN"
    Value: !GetAtt InsertRolAllFunction.Arn
  InsertRolAllFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Insert Rol function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/insert_rol/"

  InsertUserFunction:
    Description: "Insert User Lambda Function ARN"
    Value: !GetAtt InsertUserFunction.Arn
  InsertUserFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Insert User function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/insert_user/"

  UpdateUserFunction:
    Description: "Update User Lambda Function ARN"
    Value: !GetAtt UpdateUserFunction.Arn
  UpdateUserFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Update User function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/update_user/"

  GetUserAllFunction:
    Description: "Get All Users Lambda Function ARN"
    Value: !GetAtt GetUserAllFunction.Arn
  GetUserAllFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Get All Users function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/getAll/"

  GetUserByIdFunction:
    Description: "Get User By ID Lambda Function ARN"
    Value: !GetAtt GetUserByIdFunction.Arn
  GetUserByIdFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Get User By ID function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/get/{id}/"

  PatchStatusUserFunction:
    Description: "Patch Status User Lambda Function ARN"
    Value: !GetAtt PatchStatusUserFunction.Arn
  PatchStatusUserFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Patch Status User function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/updateStatus/{id}/"

  CreateRentaFunction:
    Description: "Create Renta Lambda Function ARN"
    Value: !GetAtt CreateRentaFunction.Arn
  CreateRentaFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Create Renta function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/create_renta/"

  BajaRentaFunction:
    Description: "Baja Renta Lambda Function ARN"
    Value: !GetAtt BajaRentaFunction.Arn
  BajaRentaFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Baja Renta function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/baja_renta/{id}/"

  CreateBookFunction:
    Description: "Create Book Lambda Function ARN"
    Value: !GetAtt CreateBookFunction.Arn
  CreateBookFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Create Book function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/create_book/"

  UpdateBookFunction:
    Description: "Update Book Lambda Function ARN"
    Value: !GetAtt UpdateBookFunction.Arn
  UpdateBookFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Update Book function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/update_book/{id_book}/"

  PatchBookFunction:
    Description: "Patch Book Lambda Function ARN"
    Value: !GetAtt PatchBookFunction.Arn
  PatchBookFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Patch Book function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/update_book_status/{id_book}/"

  GetBookAllFunction:
    Description: "Get All Books Lambda Function ARN"
    Value: !GetAtt GetBookAllFunction.Arn
  GetBookAllFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Get All Books function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/getAll/"

  GetBookByIdFunction:
    Description: "Get Book By ID Lambda Function ARN"
    Value: !GetAtt GetBookByIdFunction.Arn
  GetBookByIdFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Get Book By ID function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/get/{id}/"
