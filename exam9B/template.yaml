AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  exam9B

  Sample SAM Template for exam9B

Globals:
  Function:
    Timeout: 3

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UserApi
      StageName: Dev

  RolApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RolApi
      StageName: Dev

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  InsertRolAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_rol/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertRol:
          Type: Api
          Properties:
            RestApiId: !Ref RolApi
            Path: /insert_rol
            Method: post

  InsertUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: insert_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        InsertUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /insert_user
            Method: post

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /update_user
            Method: put

  GetUserAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_users/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /getAll
            Method: get

  GetUserByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_userById/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /get{id}
            Method: get

  PatchStatusUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: status_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        PatchStatus:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /updateStatus/{id}
            Method: patch

  CreateRentaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: renta/create_renta/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        CreateRenta:
          Type: Api
          Properties:
            RestApiId: !Ref RentaApi
            Path: /create_renta
            Method: post

  BajaRentaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: renta/baja_renta/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        BajaRenta:
          Type: Api
          Properties:
            RestApiId: !Ref RentaApi
            Path: /baja_renta/{id}
            Method: patch

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
